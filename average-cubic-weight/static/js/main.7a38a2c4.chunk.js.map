{"version":3,"sources":["components/LoadingSpinner.jsx","components/ProcessedResults.jsx","objects/Products.js","objects/Processor.js","components/ProcessProducts.jsx","App.js","serviceWorker.js","index.js","loading.svg"],"names":["LoadingSpinner","src","loading","alt","React","PureComponent","ProcessedResults","this","props","result","Component","Products","response","products","objects","next","category","filter","product","Processor","baseUrl","startUrl","filteredProducts","isFinished","nextRequest","processNext","nextResponse","calculateAverageCubicWeight","nextUrl","fetch","then","json","data","currentResponse","newResults","getProductsByCategory","push","cubicWeights","map","calculateCubicWeightForProduct","reduce","a","b","length","size","height","width","ProcessProducts","state","setState","processor","beginProcessing","averageCubicWeight","completeProcessing","catch","err","console","error","className","onClick","startProcessing","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"4SAGqBA,E,uKAEb,OAAO,yBAAKC,IAAKC,IAASC,IAAI,gB,GAFMC,IAAMC,eCD7BC,E,uKAEb,OAAO,oDAA0BC,KAAKC,MAAMC,Y,GAFNL,IAAMM,W,+BCF/BC,E,WAIjB,WAAYC,GAAW,oBACnBL,KAAKM,SAAYD,EAASE,QAAWF,EAASE,QAAU,GACxDP,KAAKQ,KAAQH,EAASG,KAAQH,EAASG,KAAO,G,kEAG5BC,GAClB,OAAOT,KAAKM,SAASI,QAAO,SAACC,GACzB,OAAOA,EAAQF,WAAaA,S,KCTnBG,E,iJAIKC,EAASC,G,uEAC3Bd,KAAKe,iBAAmB,GACxBf,KAAKgB,YAAa,EAClBhB,KAAKiB,YAAcH,E,UACXd,KAAKgB,W,iCACkBhB,KAAKkB,YAAYL,EAASb,KAAKiB,a,QAApDE,E,SACgC,KAAjBA,EAGjBnB,KAAKiB,YAAcE,EAFnBnB,KAAKgB,YAAa,E,gDAKnBhB,KAAKoB,+B,4IAGJP,EAASQ,GAAU,IAAD,OAC1B,OAAOC,MAAMT,EAAUQ,GAClBE,MAAK,SAAClB,GACH,OAAOA,EAASmB,UAEnBD,MAAK,SAACE,GAAU,IAAD,EACNC,EAAkB,IAAItB,EAASqB,GAC/BE,EAAaD,EAAgBE,sBAAsB,oBAEzD,OADA,IAAKb,kBAAiBc,KAAtB,oBAA8BF,IACvBD,EAAgBlB,U,oDAIJ,IAAD,OACpBsB,EAAe9B,KAAKe,iBAAiBgB,KAAI,SAACpB,GAC5C,OAAO,EAAKqB,+BAA+BrB,MAI/C,OAFuBmB,EAAaG,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GACpBL,EAAaM,S,qDAI1BzB,GAK3B,OAAqB,KAJEA,EAAQ0B,KAAKD,OAAS,KACtBzB,EAAQ0B,KAAKC,OAAS,MACvB3B,EAAQ0B,KAAKE,MAAQ,U,KCzC9BC,E,kDACjB,WAAYvC,GAAQ,IAAD,8BACf,cAAMA,IAEDwC,MAAQ,CACT9C,SAAS,EACTO,OAAQ,MALG,E,8DASA,IAAD,OACdF,KAAK0C,SAAS,CAAE/C,SAAS,IACzBK,KAAK2C,UAAY,IAAI/B,EACrBZ,KAAK2C,UAAUC,gBAAgB5C,KAAKC,MAAMY,QAASb,KAAKC,MAAMa,UAAUS,MAAK,SAACsB,GAC1E,EAAKC,mBAAmBD,MACzBE,OAAM,SAACC,GACNC,QAAQC,MAAMF,Q,yCAIHH,GACf7C,KAAK0C,SAAS,CACV/C,SAAS,EACTO,OAAQ2C,M,+BAIN,IAAD,SACuB7C,KAAKyC,MAAzB9C,EADH,EACGA,QAASO,EADZ,EACYA,OACjB,OAAe,OAAXA,GAAoBP,EAMbA,EACC,kBAAC,EAAD,MACU,OAAXO,EACC,kBAAC,EAAD,CAAkBA,OAAQF,KAAKyC,MAAMvC,cAD1C,EANC,4BAAQiD,UAAU,gBAAgBC,QAAS,kBAAM,EAAKC,oBAAtD,e,GA/B6BxD,IAAMM,WCWpCmD,MAZf,WACE,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAChB,gEACA,0HACA,kBAAC,EAAD,CAAiBtC,QAAQ,4DAA4DC,SAAS,uBCElFyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdtB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMoB,a,kBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.7a38a2c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport loading from '../loading.svg';\r\n\r\nexport default class LoadingSpinner extends React.PureComponent {\r\n    render() { \r\n        return <img src={loading} alt=\"Loading\"></img>\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class ProcessedResults extends React.Component {\r\n    render() {\r\n        return <p>Average Cubic Weight: {this.props.result}</p>;\r\n    }\r\n}","export default class Products {\r\n    next;\r\n    products;\r\n\r\n    constructor(response) {\r\n        this.products = (response.objects) ? response.objects : [];\r\n        this.next = (response.next) ? response.next : \"\";\r\n    }\r\n\r\n    getProductsByCategory(category) {\r\n        return this.products.filter((product) => {\r\n            return product.category === category;\r\n        });\r\n    }\r\n}","import Products from './Products';\r\n\r\nexport default class Processor {\r\n    filteredProducts;\r\n    isFinished;\r\n\r\n    async beginProcessing(baseUrl, startUrl) {\r\n        this.filteredProducts = [];\r\n        this.isFinished = false;\r\n        this.nextRequest = startUrl;\r\n        while (!this.isFinished) {\r\n            const nextResponse = await this.processNext(baseUrl, this.nextRequest);\r\n            if (!nextResponse || nextResponse === \"\") {\r\n                this.isFinished = true;\r\n            } else {\r\n                this.nextRequest = nextResponse;\r\n            }\r\n        }\r\n        return this.calculateAverageCubicWeight();\r\n    }\r\n\r\n    processNext(baseUrl, nextUrl) {\r\n        return fetch(baseUrl + nextUrl)\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                const currentResponse = new Products(data);\r\n                const newResults = currentResponse.getProductsByCategory(\"Air Conditioners\");\r\n                this.filteredProducts.push(...newResults);\r\n                return currentResponse.next;\r\n            });\r\n    }\r\n\r\n    calculateAverageCubicWeight() {\r\n        const cubicWeights = this.filteredProducts.map((product) => {\r\n            return this.calculateCubicWeightForProduct(product);\r\n        });\r\n        const cubicWeightSum = cubicWeights.reduce((a, b) => a + b, 0);\r\n        const avgCubicWeight = cubicWeightSum / cubicWeights.length;\r\n        return avgCubicWeight;\r\n    }\r\n\r\n    calculateCubicWeightForProduct(product) {\r\n        const lengthInMeters = product.size.length / 100.0;\r\n        const heightInMeters = product.size.height / 100.0;\r\n        const widthInMeters = product.size.width / 100.0;\r\n        const cubicMeters = lengthInMeters * heightInMeters * widthInMeters;\r\n        return cubicMeters * 250;\r\n    }\r\n}","import React from 'react';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport ProcessedResults from './ProcessedResults';\r\nimport Processor from '../objects/Processor';\r\n\r\nexport default class ProcessProducts extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: false,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    startProcessing() {\r\n        this.setState({ loading: true });\r\n        this.processor = new Processor();\r\n        this.processor.beginProcessing(this.props.baseUrl, this.props.startUrl).then((averageCubicWeight) => {\r\n            this.completeProcessing(averageCubicWeight);\r\n        }).catch((err) => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n    completeProcessing(averageCubicWeight) {\r\n        this.setState({\r\n            loading: false,\r\n            result: averageCubicWeight\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { loading, result } = this.state;\r\n        if (result === null && !loading) {\r\n            return (\r\n                <button className=\"processButton\" onClick={() => this.startProcessing()}>\r\n                    Process\r\n                </button>\r\n            );\r\n        } else if (loading) {\r\n            return (<LoadingSpinner />);\r\n        } else if (result !== null) {\r\n            return (<ProcessedResults result={this.state.result} />);\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport ProcessProducts from './components/ProcessProducts.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Challenge - Average Cubic Weight</h1>\n        <p>Please click the Process button below to begin calculating the product average cubic weight</p>\n        <ProcessProducts baseUrl=\"http://wp8m3he1wt.s3-website-ap-southeast-2.amazonaws.com\" startUrl=\"/api/products/1\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.73fad851.svg\";"],"sourceRoot":""}